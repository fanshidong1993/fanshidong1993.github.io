<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>海岸牧场</title>
    <description>一个码农呕心沥血的东西。 需要交流可以email我。
</description>
    <link>http://example.com/</link>
    <atom:link href="http://example.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 01 Mar 2017 17:56:59 +0800</pubDate>
    <lastBuildDate>Wed, 01 Mar 2017 17:56:59 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Express 【快递】 Android 开发框架</title>
        <description>&lt;p&gt;#前言&lt;/p&gt;

&lt;p&gt;Express是一款基于DataBinding&amp;amp;EventBus的Android开发框架&lt;/p&gt;

&lt;p&gt;#背景&lt;/p&gt;

&lt;p&gt;公司的接口申请制度，导致了调试接口总是在编辑页面之后
前期的MVP使用不当导致代码臃肿
故而再实际开发和应用中，总结出了现在的Express&lt;/p&gt;

&lt;p&gt;#特点&lt;/p&gt;

&lt;p&gt;高内聚 视图、逻辑、数据 分离
低耦合 利用EventBus的特性实现解耦
高效展示数据 XML+DataBinding&lt;/p&gt;

&lt;p&gt;#名词解释&lt;/p&gt;

&lt;p&gt;再介绍Express前要介绍几个重要的名称来帮助理解&lt;/p&gt;

&lt;p&gt;##EventBus&lt;/p&gt;

&lt;p&gt;EventBus 的作用是在类之间传递数据，是Express的灵魂所在。
我用一个比喻来介绍 EventBus的工作原理：
我把每一个类比做 用户。
把每一个EventBus的实体比做 邮差。
把每一条数据比做 刊物。
首先 我们要创建一个邮差 EventBus expresser = new EventBus();
第二 我们要明确有若干个用户 ClassA ， ClassB， ClassC， ClassD
第三 我们要明确有若干本刊物 DataA，DataB，DataC，DataD
第四 我们要明确 那些用户 订阅了哪些刊物 
		ClassA Subscribe DataB,DataD
		ClassB Subscribe DataC,DataA
		ClassC Subscribe DataA
		ClassD Subscribe NONE			所谓订阅，就是编写一个 公共的方法 该方法的参数只有一个就是 DataX，方法加一个订阅标记即可如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	``` java
	class ClassA{
		@Subscribe
		public void onEvent(DataB datab){
			//TODO 编写你对数据的处理
		}
		@Subscribe
		public void onEvent(DataD datad){
			//TODO 编写你对数据的处理
		}
	}
	```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第五 我们要让邮差明确 他要给谁送刊物
		expresser.regist(ClassA)
		expresser.regist(ClassB)
		expresser.regist(ClassC)
		ClassD 不用注册，因为他没有订阅
		注意:当类被销毁的时候，不要忘记反注册 expresser.unregist(ClassX) 不然 邮差效率会变低&lt;/p&gt;

&lt;p&gt;第六 明确以上内容后，在任何地方， 注意！是任何地方。无论在哪个类，哪个方法都可以
		expresser.post(DataX)
		把数据投递给邮差，邮差就能准确的把数据投递到注册过expresser并订阅了该数据的类方法中。&lt;/p&gt;

&lt;p&gt;##Databinding&lt;/p&gt;

&lt;p&gt;Android Studio 内置功能 可以把 数据类与视图文件绑定
初始化试图时， 把数据类对应的实体设置到视图上就不用再一个一个去设置控件的内容。&lt;/p&gt;

&lt;p&gt;##Activity&lt;/p&gt;

&lt;p&gt;包括了 Fragment，Dialog，View 等类，这里作为逻辑来处理，主要服务于 动画效果，字体，颜色，等可视逻辑的处理。&lt;/p&gt;

&lt;p&gt;##Model&lt;/p&gt;

&lt;p&gt;不可视逻辑，主要处理网络Api请求，本地数据库查询，耗时操作 等不可视逻辑。&lt;/p&gt;

&lt;p&gt;##Entity&lt;/p&gt;

&lt;p&gt;作为表结构的数据&lt;/p&gt;

&lt;p&gt;##RequestData&lt;/p&gt;

&lt;p&gt;作为Model处理事件 的入口数据&lt;/p&gt;

&lt;p&gt;#数据&lt;/p&gt;

&lt;p&gt;一个App的本质就是数据，就是对于数据的构造、存储、展示。
Express 中，数据被切分外两类：EventData，UIData
EventData:
	不可视数据 主要作为EventBus 传递的对象
	侧重于合理的构造 服务于 Api接口 以及 本地数据库
	其中:
		Entity 作为表结构存在，只有对应的Dao才能接触到。
		RequestData 作为Model的入口， 只有Model才能订阅
UIData:
	可视数据 主要作为DataBinding 视图绑定的对象
	侧重于合理的展示 服务于 DataBinding， 其中get方法的返回类型大都为String，便于视图展示&lt;/p&gt;

&lt;p&gt;#逻辑&lt;/p&gt;

&lt;p&gt;分为可视逻辑（Activity） 和 不可视逻辑（Model）&lt;/p&gt;

&lt;p&gt;##Model&lt;/p&gt;

&lt;p&gt;Model 是Express的重点 下面介绍几个Model的元素&lt;/p&gt;

&lt;p&gt;##RequestData&lt;/p&gt;

&lt;p&gt;Model 的入口&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//请求的URL，http开头是网络请求， DB开头是本地数据库请求，是Model中唯一识别的标记&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//参数 &lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//如果是 http 则必须有 post or get&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//是activity内用来唯一识别的标记&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;一个Model，他可以处理什么URL都会在initUrls()方法中定义好，每个Api_URL需要什么参数 会在接口文档中写明。每个DB_URL需要的参数 则需要编写model的人备注。&lt;/p&gt;

&lt;p&gt;##EventBus&lt;/p&gt;

&lt;p&gt;邮差，一个Model 只有一个，在得到处理完成的数据后，准确的推送给Activity
注意：EventBus 只能再Model中使用，可视逻辑中，使用Interface
一方面 EventBus 在前期有滥用的现象
另一方面 ，Interface 可以更好的解决多态的问题&lt;/p&gt;

&lt;p&gt;#Express主体流程&lt;/p&gt;

&lt;p&gt;发起创建／改变 视图&lt;/p&gt;

&lt;p&gt;–&amp;gt; Activity&lt;/p&gt;

&lt;p&gt;–&amp;gt; 构造RequestData 并推送给Model&lt;/p&gt;

&lt;p&gt;–&amp;gt; Model解析RequestData 并处理URL&lt;/p&gt;

&lt;p&gt;–&amp;gt; 得到处理结果的EventData 重构处理成UIData（有时可以直接使用，比如列表数据） 并推送给 Activity&lt;/p&gt;

&lt;p&gt;–&amp;gt; Activity 使用Databinding绑定UIData&lt;/p&gt;

&lt;p&gt;–&amp;gt; 视图 改变／创建 完成&lt;/p&gt;

&lt;p&gt;开发过程&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	a) 视图 + Activity + TmpModel 向 TmpModel 请求 拼接好的Data来展示

	  b) TmpActivity（不需要是 可视逻辑，Main，Java类均可，EventBus 可以在任何地方发起推送） + Model TmpActivity 向 Model 模拟请求 使用Log 打印来调试Api和本地数据库
	  
	  c) 把Tmp 替换即可。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;无论是 一个人在不同时间 编写Activity 和 Model
还是 2个人再同一时间编写Activity 和 Model
都可以 无缝对接。&lt;/p&gt;

</description>
        <pubDate>Wed, 01 Mar 2017 05:50:22 +0800</pubDate>
        <link>http://example.com/android,express/2017/03/01/Express.html</link>
        <guid isPermaLink="true">http://example.com/android,express/2017/03/01/Express.html</guid>
        
        
        <category>Android,Express</category>
        
      </item>
    
      <item>
        <title>适配PAD多面板方法以及动效介绍</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;开始&lt;/h2&gt;

&lt;p&gt;本来想封装成框架，由于本次项目想要大量运用动效，改成介绍原理，可以有更多的自定义效果。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;多面板&lt;/h2&gt;

&lt;h1 id=&quot;section-2&quot;&gt;创建&lt;/h1&gt;

&lt;p&gt;所谓多面板，就是为了同时适配 PAD(大屏幕设备)以及PHONE(正常屏幕设备) 使用大量的Fragment或者CardView分割界面 的布局。
正常布局一般放在 res/layout 中，为了适配 PAD 要在res下再创建一个文件夹 res/layout-large 同时创建一同名的布局如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wx3.sinaimg.cn/mw690/ad4f5c29gy1fcfkwoud67j20cd04v74l.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;使用&lt;/h1&gt;

&lt;p&gt;使用的时候和正常一样，当程序运行在PAD上时，系统会优先查找 res/layout-large 中的布局，如果没有，再到 res/layout 下查找。
显示适配以后，要进行逻辑适配。&lt;/p&gt;

&lt;h1 id=&quot;layout-large--layout-&quot;&gt;代码中区别当前使用的是 layout-large 下的布局还是 layout 下的布局&lt;/h1&gt;

&lt;p&gt;通过 判断 两者布局的差异。比如 layout 下 使用一个面板&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-andoird&quot;&gt;&amp;lt;FrameLayout     android:id=&quot;@+id/panel_left&quot;     /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;layout-large 下 使用两个个面板&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;FrameLayout     android:id=&quot;@+id/panel_left&quot;     /&amp;gt;
&amp;lt;FrameLayout     android:id=&quot;@+id/panel_right&quot;     /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过判断 panel_right 是否存在 来判断使用哪一块布局&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-android&quot;&gt;if(ViewGroup.findViewById(R.id.panel_right) != null ){
	//使用的 layout-large 下的布局
}else{
	//使用的 layout 下的布局
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果如下 
&lt;img src=&quot;http://wx4.sinaimg.cn/mw690/ad4f5c29gy1fcflhrlyjjj21kw16o75j.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://wx1.sinaimg.cn/mw690/ad4f5c29gy1fcflhrlbvtj21401z4763.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;波纹动效&lt;/h2&gt;

&lt;h1 id=&quot;section-5&quot;&gt;源码及效果&lt;/h1&gt;

&lt;p&gt;源码:https://github.com/naman14/MaterialPowerMenu
效果:
&lt;img src=&quot;https://raw.githubusercontent.com/naman14/MaterialPowerMenu/master/demo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-6&quot;&gt;场景&lt;/h1&gt;

&lt;p&gt;弹出对话框时 使用 波纹动效 遮盖全部界面,同时显示对话框。
对话框消失时 使用 回退波纹动效 揭示被遮盖的界面。&lt;/p&gt;

&lt;h1 id=&quot;section-7&quot;&gt;使用&lt;/h1&gt;

&lt;p&gt;类名: CircularRevealView (位于 库中 的View包下)&lt;/p&gt;

&lt;p&gt;使用FrameLayout  再最上层 放一个 CircularRevealView，以达到 遮盖和揭示的 效果&lt;/p&gt;

&lt;p&gt;遮盖 以及 揭示的 代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-android&quot;&gt;//遮盖
private void launchPowerMenu(View v,int color) {
	//计算 view 的中心位置 Helper 与 CircularRevealView 同目录
	final Point p = Helper.getLocationInView(circularRevealView, v); 
	//参数 分别是 位置x,y,颜色，最小半径,动效时间，动效监听
	circularRevealView.reveal(p.x, p.y, color, v.getHeight() / 2, 400, null);
}
//揭示
private void hide(View v,int r_color){
	final Point p = Helper.getLocationInView(circularRevealView, v);
	circularRevealView.hide(p.x,p.y,r_color,v.getHeight() / 2, 400, null);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-8&quot;&gt;共享元素&lt;/h2&gt;

&lt;p&gt;android 5.0 后自带的场景转换效果
效果如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20150730072051139&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-9&quot;&gt;场景&lt;/h1&gt;

&lt;p&gt;activity 之间跳转，有相同元素时
如: 采购任务中的 产品名 以及 采购详情中的 产品名一致， 使用该效果&lt;/p&gt;

&lt;h1 id=&quot;section-10&quot;&gt;使用&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&quot;language-android&quot;&gt;public static void launch(AppCompatActivity activity, View transitionView){

	//配置跳转Intent
	Intent intent = new Intent(activity,NewActivity.class);
	//制动 跳出 activity 中的 元素 为共享元素 并为该元素指定名称
	ActivityOptionsCompat options = ActivityOptionsCompat
	.makeSceneTransitionAnimation(activity, transitionView, &quot;tv&quot;);
	//启动跳转
	ActivityCompat.startActivity(activity, intent, options.toBundle());
}
@Override
protected void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
	setContentView(R.layout.activity_new);
	TextView tv = (TextView) findViewById(R.id.tv_hw);
	//制定跳入界面的共享元素 并 制定名称 （必需与跳出界面指定的元素名称一致）
	ViewCompat.setTransitionName(tv,&quot;tv&quot;);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后再 跳出 Activity 中 调用 launch&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-android&quot;&gt;NewActivity.launch(MainActivity.this,tv);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;options 可以配置多个 共享元素
intent 可以 配置 扩展参数 来专递 数据
所以 launch 的 参数 不要局限于这2个。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;结束&lt;/h2&gt;

&lt;p&gt;更多有合适的动效 和 布局方式 ， 再开发中 根据模块的情况使用。&lt;/p&gt;

</description>
        <pubDate>Sun, 05 Feb 2017 05:10:22 +0800</pubDate>
        <link>http://example.com/android,%E5%8A%A8%E6%95%88/2017/02/05/%E5%8D%95-%E5%8F%8C%E9%9D%A2%E6%9D%BF&%E6%B3%A2%E7%BA%B9%E5%8F%8D%E9%A6%88&%E5%85%B1%E4%BA%AB%E5%85%83%E7%B4%A0.html</link>
        <guid isPermaLink="true">http://example.com/android,%E5%8A%A8%E6%95%88/2017/02/05/%E5%8D%95-%E5%8F%8C%E9%9D%A2%E6%9D%BF&%E6%B3%A2%E7%BA%B9%E5%8F%8D%E9%A6%88&%E5%85%B1%E4%BA%AB%E5%85%83%E7%B4%A0.html</guid>
        
        
        <category>Android,动效</category>
        
      </item>
    
      <item>
        <title>小程序开发后感</title>
        <description>&lt;p&gt;前几天注册了一个小程序的帐号，玩了一把，选择吐槽一波，顺便往我这个几百年不更新的个人网站注水。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;所谓“小程序”&lt;/h1&gt;

&lt;p&gt;套路和前端开发一毛一样。
前端是   html+js+css
小程序是  wxml+js+wxss
就连名字都只是简单的改改前缀。所谓的“WX语言”，有什么不懂的直接百度，前端＋相同的问题。
我相信任何一个合格的前端，都能轻松上手小程序，就连我这个半吊子都可以。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;开发工具的槽点&lt;/h1&gt;

&lt;p&gt;下面我来重点吐槽一下wx的开发工具，这个是我从开始使用到开发完成都一直在吐槽的东西。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/ad4f5c29gw1f9odingeq5j208q05kq35.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;编辑框的滚动条等于没有!!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/ad4f5c29gw1f9odod28x1j20zm1740uv.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;即使后面有再多的内容，都滚动不过去，你必须换行，但是有些地方换行会导致语法错误，简直醉了。
 如果内嵌的多了，或者单行长了，编辑的时候都很难受。&lt;/p&gt;

&lt;p&gt;工作台，在第一次进入的时候，下标是在 资源（sources）下的，但是显示的内容是 console，第一次使用的时候以为我MAC卡了，我一脸蒙蔽。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/ad4f5c29gw1f9odvxll1jj21gi0s67c8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在微信上运行项目的时候，所有image的资源链接都被屏蔽，
我在编译器上的效果是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/ad4f5c29gw1f9odxsxb04j21kw0vs48f.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是在微信上是空白的。我虽然没有申请上线，但是小程序既然允许真机调试，那么我有理由相信这个是bug。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;结尾&lt;/h1&gt;

&lt;p&gt;小程序在填写注册的时候会要求你选择服务类别，有几十种吧，并且要求你的“小程序”要严格在你选择的服务类别之内，小程序官方文档中还有一个设计规范，我不清楚是建议还是规定，我感觉这尿性会是规定（毕竟苹果爸爸不高兴了，给你下架你不是和360一样蒙蔽）。这样，小程序就不会那么容易给创业者多大的发挥空间，至少现在的公测版是这样的。&lt;/p&gt;

</description>
        <pubDate>Fri, 11 Nov 2016 07:09:56 +0800</pubDate>
        <link>http://example.com/%E9%9A%8F%E7%AC%94%EF%BC%8C%E6%B5%81%E6%B0%B4%E8%B4%A6/2016/11/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%90%8E%E6%84%9F.html</link>
        <guid isPermaLink="true">http://example.com/%E9%9A%8F%E7%AC%94%EF%BC%8C%E6%B5%81%E6%B0%B4%E8%B4%A6/2016/11/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%90%8E%E6%84%9F.html</guid>
        
        
        <category>随笔，流水账</category>
        
      </item>
    
      <item>
        <title>Android开发者练习项目PopMovies（一）HttpURLConnection&amp;AsyncTask</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;最近参加了一个Google官方的远程教育课程，在课程中要完成一些项目。借此，我写成Blog，在自己巩固已经掌握的API的同时，希望分享给大家。&lt;/p&gt;

&lt;h1 id=&quot;asynctask&quot;&gt;AsyncTask&lt;/h1&gt;

&lt;p&gt;这是一个轻量级的异步任务类。与Handler的作用一样。
优点：使用方便，结构简单
缺点：只能处理单个异步任务，在多个异步任务并发的处理上不如Handler&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// URL 是doInBackground的入参类型
// Integer 是onProgressUpdate的入参类型
// Long 是doInBackground 的出参类型 已经 onPostExecute的入参类型
// 当然， 这些类型都是你自定义的， 这里只是个例子，如果为空，则设为Void
private class DownloadFilesTask extends AsyncTask&amp;lt;URL, Integer, Long&amp;gt; {
		// doInBackground 在子线程中进行 
		// 这里还有一个 方法 叫void onPreExecute () 是在doInBackground前被执行的一些初始化的
		// 一些初始化的工作可以在 onPreExecute 进行。
     protected Long doInBackground(URL... urls) {
         int count = urls.length;
         long totalSize = 0;
         for (int i = 0; i &amp;lt; count; i++) {
             totalSize += Downloader.downloadFile(urls[i]);
             // 这个publishProgress 会调用onProgressUpdate，
             // 把你计算的进度结果告诉onProgressUpdate
             publishProgress((int) ((i / (float) count) * 100));
             // Escape early if cancel() is called
             // AsyncTask.cancel() 可以取消任务。
             // 所以当任务有可能被取消的时候， 就需要做一些处理，防止出错。
             if (isCancelled()) break;
         }
         return totalSize;
     }
		// onProgressUpdate 在UI线程的方法。告诉你 任务进行到百分之几了
		// 在UI上可以告诉用户这个百分比
     protected void onProgressUpdate(Integer... progress) {
         setProgressPercent(progress[0]);
     }
		// onPostExecute 同样在UI线程的方法 任务完成后的一些处理
		// result 就是网络加载的结果了
     protected void onPostExecute(Long result) {
         showDialog(&quot;Downloaded &quot; + result + &quot; bytes&quot;);
     }
     // 顺带提一句 onPreExecute 也是在UI线程中的
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;开始任务 就一句话&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//这里的execute 参数就是 doInBackground的入参，最终会转化成数组，所以，放几个都可以。
new DownloadFilesTask().execute(url1, url2);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注:上诉代码来自developer.android.com中文注释为博主添加&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;httpurlconnection&quot;&gt;HttpURLConnection&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;对于上手就是OKHttp，Volley，等网络请求框架的人来说（没错就是我）HttpURLConnection 确实需要学习一下。哈哈！如果你已经很熟了，翻篇吧。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;写来写去，发现CSDN有个大牛，写的特别清楚特别全面就贴个&lt;a href=&quot;http://blog.csdn.net/woxueliuyun/article/details/43267365&quot;&gt;链接&lt;/a&gt;吧，膜拜膜拜。&lt;/p&gt;

&lt;p&gt;说到了网络请求， 这里就提一下我使用的 图片加载管理吧–&amp;gt;Picasso。
如果你用 Androidstudio 的话 添加和使用都很方便。
首先你在build.gradle(Module:app)中 添加Picasso依赖&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//简单粗暴一看就会
android {
    ...
    repositories {
        mavenCentral()
    }
}
dependencies {
    ...
    compile 'com.squareup.picasso:picasso:2.5.2'
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后就可以使用Picasso啦。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//最粗暴的用法
Picasso.with(context).load(url).into(imageview);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;想看 Picasso 详细点的， 具体点的， 丰富的的，&lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;戳这里&lt;/a&gt;&lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;http://square.github.io/picasso/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;数据来源&lt;/h1&gt;

&lt;p&gt;说了这么多，异步任务，网络请求，图片加载缓存的控件，我们的数据从那里拿呢
www.themoviedb.org 由这个TA提供，你需要注册一个帐户，然后添加一个APP，并填写一下信息（反正我是瞎写的）然后就会得到一个API_KEY，这是你请求数据的关键哟。
之后你想要啥数据&lt;a href=&quot;http://docs.themoviedb.apiary.io/#/&quot;&gt;http://docs.themoviedb.apiary.io/#/&lt;/a&gt;参见API文档吧。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;结束&lt;/h1&gt;

&lt;p&gt;网络请求，已经接口相关的准备工作完成。&lt;/p&gt;

</description>
        <pubDate>Thu, 08 Sep 2016 10:09:56 +0800</pubDate>
        <link>http://example.com/android/2016/09/08/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BB%83%E4%B9%A0%E9%A1%B9%E7%9B%AEPopMovies-%E4%B8%80-HttpURLConnection&AsyncTask.html</link>
        <guid isPermaLink="true">http://example.com/android/2016/09/08/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BB%83%E4%B9%A0%E9%A1%B9%E7%9B%AEPopMovies-%E4%B8%80-HttpURLConnection&AsyncTask.html</guid>
        
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>一个基于MVP的Android标准化框架的制作过程</title>
        <description>&lt;h1 id=&quot;mvpandroid&quot;&gt;一个基于MVP的Android标准化框架的制作过程&lt;/h1&gt;
&lt;h2 id=&quot;mvp&quot;&gt;MVP模式&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter&lt;/code&gt; &lt;strong&gt;MVP&lt;/strong&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt; 模型，一切耗时的，复杂的操作（网络请求，算法等），都在这里进行。
&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; 视图，可以认为是UI，是activity而不是XML，它除了展现画面给用户一位，还是要监听用户操作，是交互。
&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter&lt;/code&gt; 顾名思义，是这个模式的&lt;strong&gt;主持人&lt;/strong&gt;，它是Model和View交流的中枢。 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; 互相不知道彼此的动作，所以在开发，测试的时候可以并行，加快开发测试的速度。
&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter&lt;/code&gt; 定义了View，Model的各种行为。
发起一个动作的过程
&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;–&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter&lt;/code&gt;–&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;–&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter&lt;/code&gt;–&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;监听到事件，调用起&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter&lt;/code&gt;相关的方法，该方法调用起&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;相关的方法。
&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;处理完事件后，把结果返回给&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter&lt;/code&gt;再控制&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;改变UI界面，完成交互。
这里的方法 均用&lt;code class=&quot;highlighter-rouge&quot;&gt;Interface&lt;/code&gt;来实现， &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt; 均实现相关的&lt;code class=&quot;highlighter-rouge&quot;&gt;Interface&lt;/code&gt;来达到目的。
这就要求，在实现&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;之前就要定义好他们所有的行为。
接下来 实现一个简单的例子：
先实现一个&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;即&lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt;
我们定义这个&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的几个行为。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-android&quot;&gt;public interface DemoViewInterface {
    /*
    * 用Toast展示一段文字并显示他的长度
    * */
    void showToast(int length);
    /*
    * 用Dialog展示一段文字并显示它的长度
    * */
    void showDialog(int length);
    /*
    * 展示倒计时(演示耗时操作)
    * */
    void showCountDown(int count);

    /**
     * 展示网络请求得到的数据
     * @param msg 网络请求抓回来的数据
     */
    void showMessage(String msg);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt;中实现这个接口。
首先实现&lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt;布局&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;
&amp;lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;&amp;gt;

    &amp;lt;EditText
        android:id=&quot;@+id/et_input&quot;
        android:hint=&quot;@string/hint&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;wrap_content&quot; /&amp;gt;
    &amp;lt;LinearLayout
        android:orientation=&quot;horizontal&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;wrap_content&quot;&amp;gt;
        &amp;lt;Button
            android:id=&quot;@+id/btn_showtoast&quot;
            android:text=&quot;@string/showtoast&quot;
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;wrap_content&quot; /&amp;gt;
        &amp;lt;Button
            android:id=&quot;@+id/btn_showdialog&quot;
            android:text=&quot;@string/showdialog&quot;
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;wrap_content&quot; /&amp;gt;
    &amp;lt;/LinearLayout&amp;gt;
    &amp;lt;LinearLayout
        android:orientation=&quot;horizontal&quot;
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;wrap_content&quot;&amp;gt;
        &amp;lt;TextView
            android:id=&quot;@+id/tv_countdown_number&quot;
            android:layout_gravity=&quot;center_vertical&quot;
            android:text=&quot;10&quot;
            android:textSize=&quot;30dp&quot;
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;wrap_content&quot; /&amp;gt;
        &amp;lt;Button
            android:id=&quot;@+id/btn_countdown_start&quot;
            android:text=&quot;@string/startcountdown&quot;
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;wrap_content&quot; /&amp;gt;
        &amp;lt;Button
            android:id=&quot;@+id/btn_countdown_reset&quot;
            android:text=&quot;@string/reset&quot;
            android:layout_width=&quot;wrap_content&quot;
            android:layout_height=&quot;wrap_content&quot; /&amp;gt;
    &amp;lt;/LinearLayout&amp;gt;
    &amp;lt;Button
        android:id=&quot;@+id/btn_request&quot;
        android:text=&quot;@string/requert&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot; /&amp;gt;
    &amp;lt;TextView
        android:id=&quot;@+id/tv_result&quot;
        android:hint=&quot;@string/showresult&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot; /&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;预览时这样子的：
&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/ad4f5c29gw1f7iwim7inpj20t6101aco.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Activity&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;Bind&lt;/code&gt;所有控件，添加监听，实现接口后，我们就完成了这个&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的第一步&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-android&quot;&gt;public class DemoViewActivity extends Activity implements DemoViewInterface, View.OnClickListener {

    private Button btn_showToast,btn_showDialog,btn_countDownStart,btn_countDownReset,btn_request;
    private TextView tv_countDown_number,tv_showResult;
    private EditText et_input;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_demoview);
        bindView();
        bindEvent();
    }

    private void bindEvent() {
        btn_request.setOnClickListener(this);
        btn_countDownReset.setOnClickListener(this);
        btn_countDownStart.setOnClickListener(this);
        btn_showDialog.setOnClickListener(this);
        btn_showToast.setOnClickListener(this);
    }

    private void bindView() {
        et_input = (EditText) findViewById(R.id.et_input);
        btn_showToast = (Button) findViewById(R.id.btn_showtoast);
        btn_showDialog = (Button) findViewById(R.id.btn_showdialog);
        tv_countDown_number = (TextView) findViewById(R.id.tv_countdown_number);
        btn_countDownStart = (Button) findViewById(R.id.btn_countdown_start);
        btn_countDownReset = (Button) findViewById(R.id.btn_countdown_reset);
        btn_request = (Button) findViewById(R.id.btn_request);
        tv_showResult = (TextView) findViewById(R.id.tv_result);
    }


    @Override
    public void showToast(String str, int length) {
        String content = str + &quot;&amp;amp;&quot; + length;
        Toast.makeText(this,content,Toast.LENGTH_LONG).show();
    }

    @Override
    public void showDialog(String str, int length) {
        Dialog dialog = new Dialog(this);
        String content = str + &quot;&amp;amp;&quot; + length;
        TextView tv_content = new TextView(this);
        tv_content.setText(content);
        dialog.setContentView(tv_content);
        dialog.show();
    }

    @Override
    public void showCountDown(int count) {
        tv_countDown_number.setText(String.valueOf(count));
    }

    @Override
    public void showMessage(String msg) {
        tv_showResult.setText(msg);
    }

    @Override
    public void onClick(View v) {
        int id = v.getId();
        //ToDo 在每个case下实现presenter相应方法并调用
        switch (id){
            case R.id.btn_showtoast:
                break;
            case R.id.btn_showdialog:
                break;
            case R.id.btn_countdown_reset:
                break;
            case R.id.btn_countdown_start:
                break;
            case R.id.btn_request:
                break;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来， 实现&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;一样，我们先定义它的所有行为。&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;的行为是在监听到用户事件后让&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter&lt;/code&gt;调用的，而&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter&lt;/code&gt;则是让&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;在完成耗时操作或计算或网络请求的时候调用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-android&quot;&gt;public interface DemoPresenterInterface {
    /**
     * 完成字符串长度的计算
     * @param str 字符串
     * @param length 字符串的长度
     */
    void completeStringCount(String str, int length);

    /**
     * 完成1秒的计数
     * @param count 当前的计数
     */
    void completeCountDownASecend(int count);

    /**
     * 完成网络请求
     * @param result 网络请求的结果
     */
    void completeRequest(String result);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Presenter的实现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-android&quot;&gt;public class DemoPresenter implements DemoPresenterInterface {
    /*
    * 在View 已经实现了的接口
    * */
    private DemoViewInterface demoViewInterface;

    // TODO: 实现DemoModel
    private DemoModel demoModel;
    /*
    * 判断是用吐司还是弹窗显示的变量
    * */
    private Boolean isToast;

    /**
     * 构造函数
     * @param demoViewInterface
     */
    DemoPresenter(DemoViewInterface demoViewInterface){
        this.demoViewInterface = demoViewInterface;
        isToast = true;//设置一个初始值
    }
    /*
    * 以下是创建供View调用的方法,具体的实现,要完成Model后才可以操作
    * */
    public void clickShowToast(){
        isToast = true;
        // TODO: 实现model对应方法并调用
    }
    public void clickShowDialog(){
        isToast = false;
        // TODO: 实现model对应方法并调用
    }
    public void clickCountDownStart(){
        // TODO: 实现model对应方法并调用
    }
    public void clickCountDownRestart(){
        // TODO: 实现model对应方法并调用
    }
    public void clickRequest(){
        // TODO: 实现model对应方法并调用
    }
    /*
    * 以下是对DemoPresenterInterface的实现
    * */
    @Override
    public void completeStringCount(String str, int length) {
        if (isToast) demoViewInterface.showToast(str,length);
        else demoViewInterface.showDialog(str,length);
    }

    @Override
    public void completeCountDownASecend(int count) {
        demoViewInterface.showCountDown(count);
    }

    @Override
    public void completeRequest(String result) {
        demoViewInterface.showMessage(result);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后，实现&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;，这里不需要定义行为，因为它是&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter&lt;/code&gt;私有成员变量，直接定义方法就可以让&lt;code class=&quot;highlighter-rouge&quot;&gt;Presenter&lt;/code&gt;调用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-android&quot;&gt;public class DemoModel {

    private final int MAX_COUNTER = 10;
    private DemoPresenterInterface demoPresenterInterface;
    private int counter;
    public DemoModel(DemoPresenterInterface demoPresenterInterface){
        this.demoPresenterInterface = demoPresenterInterface;
        resetCounter();
    }

    private void resetCounter() {
        counter = MAX_COUNTER;
    }

    public void calculationStringLength(String str){

        demoPresenterInterface.completeStringCount(str,str.length());

    }
    /*
    * 子线程不能直接操作UI线程,通过handler解决
    * */
    private final android.os.Handler handler = new android.os.Handler() {
        @Override
        public void handleMessage(Message msg) {
            demoPresenterInterface.completeCountDownASecend(counter);
            super.handleMessage(msg);
        }
    };
    public void countDownASecond(){
        //耗时操作, 开个线程
        new Thread(){
            @Override
            public void run() {
                while (counter &amp;gt; 0)
                try {
                    Thread.sleep(1000);
                    counter --;
                    handler.sendEmptyMessage(0);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }.start();
    }

    public void countDownReset(){
        resetCounter();
        demoPresenterInterface.completeCountDownASecend(counter);
    }
    public void request(){
        //请求数据的URL
        String URL = &quot;http://www.icityto.com/X_UserLogic/yesicity2015/nickname_Page/?Uid=yesicity2015&amp;amp;Field_YHID=559&amp;amp;Yesicity=1&amp;amp;Id=552&quot;;
        JsonObjectRequest request = new JsonObjectRequest(URL, null,
                new Response.Listener&amp;lt;JSONObject&amp;gt;() {
                    @Override
                    public void onResponse(JSONObject jsonObject) {
                        //请求成功回调
                        demoPresenterInterface.completeRequest(jsonObject.toString());
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError volleyError) {
                        //请求失败回调
                        demoPresenterInterface.completeRequest(volleyError.toString());
                    }
                });
        RequestQueue.getmQueue().add(request);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下一步就是把之前的&lt;code class=&quot;highlighter-rouge&quot;&gt;todo&lt;/code&gt;完成掉。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DemoViewActivity&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;onClick&lt;/code&gt;里的&lt;code class=&quot;highlighter-rouge&quot;&gt;todo&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-android&quot;&gt;@Override
    public void onClick(View v) {
        int id = v.getId();
        switch (id){
            case R.id.btn_showtoast:
                demoPresenter.clickShowToast(et_input.getText().toString());
                break;
            case R.id.btn_showdialog:
                demoPresenter.clickShowDialog(et_input.getText().toString());
                break;
            case R.id.btn_countdown_reset:
                demoPresenter.clickCountDownRestart();
                break;
            case R.id.btn_countdown_start:
                demoPresenter.clickCountDownStart();
                break;
            case R.id.btn_request:
                demoPresenter.clickRequest();
                break;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DemoPresenter&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;todo&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	public void clickShowToast(String str){
        isToast = true;
        demoModel.calculationStringLength(str);
    }
    public void clickShowDialog(String str){
        isToast = false;
        demoModel.calculationStringLength(str);
    }
    public void clickCountDownStart(){
        demoModel.countDownASecond();
    }
    public void clickCountDownRestart(){
        demoModel.countDownReset();
    }
    public void clickRequest(){
        demoModel.request();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;至此&lt;code class=&quot;highlighter-rouge&quot;&gt;MVP&lt;/code&gt;模式的基本实现完成
&lt;a href=&quot;https://github.com/fanshidong1993/StandardizationFramework&quot;&gt;源码&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 05 Sep 2016 17:38:22 +0800</pubDate>
        <link>http://example.com/android/2016/09/05/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EMVP%E7%9A%84Android%E6%A0%87%E5%87%86%E5%8C%96%E6%A1%86%E6%9E%B6%E7%9A%84%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8B.html</link>
        <guid isPermaLink="true">http://example.com/android/2016/09/05/%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8EMVP%E7%9A%84Android%E6%A0%87%E5%87%86%E5%8C%96%E6%A1%86%E6%9E%B6%E7%9A%84%E5%88%B6%E4%BD%9C%E8%BF%87%E7%A8%8B.html</guid>
        
        
        <category>Android</category>
        
      </item>
    
  </channel>
  
</rss>
